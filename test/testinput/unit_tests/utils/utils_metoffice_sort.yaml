no key:
# Here the expected output is just the sorted input
- input: []
  output: []
- input: [1]
  output: [1]
- input: [5, -3, 6, 2, 7, 2]
  output: [-3, 2, 2, 5, 6, 7]
- input: [0, 7, 1, 4, 1]
  output: [0, 1, 1, 4, 7]
with key:
# Here the expected output is effectively argsort(keys)
- keys: []
  output: []
- keys: [a]
  output: [0]
- keys: [b, a, c]
  output: [1, 0, 2]
# A sequence with duplicate keys
- keys: [4, 3, 1, 8, 9, 7, 1, 8, 7, 3, 0, 5, 6, 8, 4, 6, 0, 9, 5, 0, 4, 9, 2, 0, 0, &
         4, 7, 8, 6, 2, 5, 9, 0, 9, 7, 6, 7, 8, 0, 1, 0, 7, 0, 2, 9, 1, 9, 5, 6, 9, &
         4, 3, 9, 0, 0, 7, 2, 0, 2, 7, 0, 4, 4, 7, 2, 2, 8, 4, 3, 3, 7, 5, 9, 3, 6, &
         2, 5, 6, 0, 7, 8, 9, 6, 2, 3, 2, 9, 0, 4, 9, 7, 9, 0, 0, 3, 7, 4, 9, 6, 1]
# The reference output was generated using Ops_IntegerSort.
  output: [93, 40, 78, 24, 57, 54, 10, 19, 32, 42, 38, 87, 60, 53, 23, 92, 16, 39,
            6, 99,  2, 45, 58, 56, 43, 29, 83, 22, 64, 75, 65, 85, 51,  9, 94, 73,
           84, 69, 68,  1, 61, 14, 25, 50, 88, 62, 20, 96,  0, 67, 30, 11, 47, 18,
           76, 71, 28, 12, 98, 48, 82, 77, 74, 35, 15, 59, 55, 26,  5, 95, 90, 41,
           79, 36,  8, 70, 34, 63, 27, 13, 80, 37,  3, 66,  7, 52, 49, 97, 46, 91,
           89, 44, 21, 86, 81,  4, 72, 17, 33, 31]
